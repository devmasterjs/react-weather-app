{"version":3,"sources":["components/error/error-component.jsx","components/loading/loading-component.jsx","services/api.js","components/weather/weather-component.jsx","pages/weather/weather-page.jsx","App.js","reportWebVitals.js","index.js"],"names":["ErrorCompoenent","props","error","className","color","icon","faFrownOpen","size","LoadingComponent","faSync","url","setUrl","latitude","longitude","process","getUrl","api","axios","create","WeatherComponent","useState","position","setPosition","loading","data","setData","useEffect","updatePosition","geoPosition","a","coords","getWeatherData","get","then","response","address","name","sys","country","weather","description","windspeed","mpsTokmh","wind","speed","temperature","kelvinToCelsius","main","temp","humidity","pressure","lastUpdate","getDateNow","isconnected","catch","e","message","navigator","geolocation","getCurrentPosition","getGeoLocation","toFixed","dateNow","Date","getDate","getMonth","getFullYear","getHours","toString","padStart","getMinutes","src","alt","width","height","onClick","WeatherPage","title","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d734bfe.chunk.js","sourcesContent":["import React from \"react\";\nimport { faFrownOpen } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./error-component.styles.css\";\n\nfunction ErrorCompoenent(props) {\n  return props.error ? (\n    <div>\n      <FontAwesomeIcon\n        className=\"icon\"\n        color=\"blueviolet\"\n        icon={faFrownOpen}\n        size={\"10x\"}\n      />\n      <div className=\"error\">\n        {props.error}\n        <div>Try again !</div>\n      </div>\n    </div>\n  ) : null;\n}\n\nexport default ErrorCompoenent;\n","import React from \"react\";\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./loading-component.styles.css\";\n\nfunction LoadingComponent(props) {\n  return (\n    <div className=\"icon-spin\">\n      <FontAwesomeIcon icon={faSync} size={\"10x\"} color=\"white\" />\n    </div>\n  );\n}\n\nexport default LoadingComponent;\n","import axios from \"axios\";\n\nlet url = \"\";\n\nexport const setUrl = (latitude, longitude) => {\n  url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${process.env.REACT_APP_OPEN_WEATHER_API_KEY}\n  `;\n};\n\nexport const getUrl = () => {\n  return url;\n};\n\nconst api = axios.create();\n\nexport default api;\n","import React, { useState, useEffect } from \"react\";\nimport ErrorComponent from \"../error/error-component\";\nimport LoadingComponent from \"../loading/loading-component\";\nimport \"./weather-component.styles.css\";\nimport api, { setUrl, getUrl } from \"../../services/api\";\n\nconst WeatherComponent = () => {\n  const [position, setPosition] = useState({ latitude: 0, longitude: 0 });\n  const [data, setData] = useState({ loading: true });\n\n  useEffect(() => {\n    async function updatePosition(geoPosition) {\n      setPosition({\n        latitude: geoPosition.coords.latitude,\n        longitude: geoPosition.coords.longitude,\n      });\n    }\n\n    async function getWeatherData() {\n      if (position.latitude && position.longitude) {\n        setUrl(position.latitude, position.longitude);\n        api\n          .get(getUrl())\n          .then((response) => {\n            setData({\n              address: `${response.data.name}, ${response.data.sys.country}`,\n              country: response.data.sys.country,\n              icon: ` http://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\n              description: response.data.weather[0].description,\n              windspeed: mpsTokmh(response.data.wind.speed),\n              temperature: kelvinToCelsius(response.data.main.temp),\n              humidity: response.data.main.humidity,\n              pressure: response.data.main.pressure,\n              lastUpdate: getDateNow(),\n              isconnected: true,\n              loading: false,\n            });\n          })\n          .catch((e) => {\n            setData({\n              lastUpdate: getDateNow(),\n              isconnected: false,\n              error: e.message,\n              loading: false,\n            });\n          });\n      }\n    }\n\n    async function getGeoLocation() {\n      try {\n        await navigator.geolocation.getCurrentPosition(updatePosition);\n        await getWeatherData();\n      } catch (e) {\n        setData({\n          isconnected: false,\n          error: e.message,\n          loading: false,\n        });\n      }\n    }\n\n    getGeoLocation();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [position.latitude]);\n\n  function UpdateData() {\n    setPosition({ latitude: 0, longitude: 0 });\n    setData({ loading: true });\n  }\n\n  const mpsTokmh = (speed) => {\n    const speedInKm = speed * 3.72;\n    return speedInKm.toFixed(2);\n  };\n\n  const kelvinToCelsius = (temp) => {\n    const tempInCelsius = temp - 273.15;\n    return tempInCelsius.toFixed(2);\n  };\n\n  const getDateNow = () => {\n    let dateNow = new Date();\n    let localdate =\n      dateNow.getDate() +\n      \"/\" +\n      (dateNow.getMonth() + 1) +\n      \"/\" +\n      dateNow.getFullYear() +\n      \" \" +\n      dateNow.getHours().toString().padStart(2, \"0\") +\n      \":\" +\n      dateNow.getMinutes().toString().padStart(2, \"0\");\n    return localdate;\n  };\n\n  return (\n    <div className=\"weather-container\">\n      {data.loading ? (\n        <LoadingComponent />\n      ) : data.isconnected ? (\n        <div className=\"weather-data\">\n          <div className=\"weather-location\">\n            <div className=\"location\">\n              <h2>{data.address}</h2>\n            </div>\n\n            <div>\n              <img\n                src={data.icon}\n                alt=\"Imagem do Tempo\"\n                width={150}\n                height={150}\n              />\n            </div>\n          </div>\n\n          <div className=\"weather-temp-container\">\n            <div className=\"weather-temp\">\n              {data.temperature} <sup>o</sup>C\n            </div>\n            <div className=\"weather-description\">{data.description}</div>\n          </div>\n\n          <div className=\"weather-data-now\">\n            <div className=\"weather-data-now-item\">\n              <div>Wind Speed</div>\n              {data.windspeed} Km/h\n            </div>\n            <div className=\"weather-data-now-item\">\n              <div>Humidity: </div>\n              {data.humidity}%\n            </div>\n            <div className=\"weather-data-now-item\">\n              <div>Pressure: </div>\n              {data.pressure} hPa\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div>\n          <ErrorComponent error={data.error} />\n        </div>\n      )}\n\n      <div className=\"button\">\n        <button onClick={UpdateData}>Update</button>\n      </div>\n      <div className=\"lastUpdated\">\n        <span>Last Updated: </span>\n        {data.lastUpdate}\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherComponent;\n","import WeatherComponent from \"../../components/weather/weather-component\";\nimport \"./weather-page.styles.css\";\n\nconst WeatherPage = ({ title }) => {\n  return (\n    <div className=\"container\">\n      <h1>{title}</h1>\n      <WeatherComponent />\n    </div>\n  );\n};\n\nexport default WeatherPage;\n","import WeatherPage from \"./pages/weather/weather-page\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherPage title=\"TEMPO AGORA EM\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}